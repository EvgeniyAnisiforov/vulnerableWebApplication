const { Pool } = require('pg');
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

const pool = new Pool({
  user: "postgres",
  host: "db",
  database: "asip",
  password: "admin",
  port: 5432,
});

delay(5000).then(() => {
  // Проверка соединения с базой данных
  pool.query("SELECT NOW()", (err, result) => {
    if (err) {
      console.error("Ошибка подключения к базе данных:", err);
    } else {
      console.log("Успешно подключено к базе данных:", result.rows[0].now);
      // Создание таблицы после успешного подключения
      pool.query(`
        CREATE TABLE IF NOT EXISTS users (
          id SERIAL PRIMARY KEY,
          email VARCHAR(255) UNIQUE NOT NULL,
          password VARCHAR(255) NOT NULL,
          first_name VARCHAR(255) NOT NULL,
          last_name VARCHAR(255) NOT NULL,
          middle_name VARCHAR(255) NOT NULL,
          phone VARCHAR(255) UNIQUE NOT NULL,
          address VARCHAR(255) NOT NULL,
          age INT NOT NULL
        );
      `, (err, result) => {
        if (err) {
          console.error("Ошибка создания таблицы:", err);
        } else {
          console.log("Таблица users успешно создана");
          
          // Очищаем таблицу перед заполнением
          pool.query("DELETE FROM users;", (err) => {
            if (err) {
              console.error("Ошибка очистки таблицы:", err);
            } else {
              console.log("Таблица users успешно очищена");
              
              // Заполнение таблицы данными
              pool.query(`
                INSERT INTO users (email, password, first_name, last_name, middle_name, age, phone, address) VALUES
                  ('user1', 'password', 'Иван', 'Иванов', 'Иванович', 30, '8 (900) 123-45-67', 'г. Москва, ул. Ленина, д. 1, кв. 1'),
                  ('user2', 'password', 'Петр', 'Петров', 'Петрович', 25, '8 (900) 234-56-78', 'г. Санкт-Петербург, ул. Невского, д. 2, кв. 2'),
                  ('user3', 'password', 'Мария', 'Сидорова', 'Алексеевна', 28, '8 (900) 345-67-89', 'г. Новосибирск, ул. Кирова, д. 3, кв. 3'),
                  ('user4', 'password', 'Андрей', 'Кузнецов', 'Сергеевич', 32, '8 (900) 456-78-90', 'г. Екатеринбург, ул. Свердлова, д. 4, кв. 4'),
                  ('user5', 'password', 'Ольга', 'Смирнова', 'Алексеевна', 29, '8 (900) 567-89-01', 'г. Нижний Новгород, ул. Горького, д. 5, кв. 5'),
                  ('user6', 'password', 'Дмитрий', 'Попов', 'Владимирович', 38, '8 (900) 678-90-12', 'г. Казань, ул. Баумана, д. 6, кв. 6'),
                  ('user7', 'password', 'Елена', 'Соколова', 'Петровна', 24, '8 (900) 789-01-23', 'г. Самара, ул. Куйбышева, д. 7, кв. 7'),
                  ('user8', 'password', 'Сергей', 'Кузнецов', 'Александрович', 35, '8 (900) 890-12-34', 'г. Омск, ул. Ленина, д. 8, кв. 8'),
                  ('user9', 'password', 'Анна', 'Козлова', 'Сергеевна', 27, '8 (900) 901-23-45', 'г. Челябинск, ул. Кирова, д. 9, кв. 9'),
                  ('user10', 'password', 'Максим', 'Иванов', 'Алексеевич', 40, '8 (900) 012-34-56', 'г. Ростов-на-Дону, ул. Пушкинская, д. 10, кв. 10'),
                  ('user11', 'password', 'Татьяна', 'Михайлова', 'Васильевна', 26, '8 (900) 112-45-67', 'г. Уфа, ул. Октябрьской Революции, д. 11, кв. 11'),
                  ('user12', 'password', 'Александр', 'Петров', 'Александрович', 31, '8 (900) 223-56-78', 'г. Красноярск, ул. Мира, д. 12, кв. 12'),
                  ('user13', 'password', 'Светлана', 'Соколова', 'Васильевна', 28, '8 (900) 334-67-89', 'г. Пермь, ул. Ленина, д. 13, кв. 13'),
                  ('user14', 'password', 'Николай', 'Кузнецов', 'Петрович', 36, '8 (900) 445-78-90', 'г. Воронеж, ул. Плехановская, д. 14, кв. 14'),
                  ('user15', 'password', 'Ирина', 'Иванова', 'Алексеевна', 23, '8 (900) 556-89-01', 'г. Саратов, ул. Московская, д. 15, кв. 15');
              `, (err, result) => {
                if (err) {
                  console.error("Ошибка заполнения таблицы:", err);
                } else {
                  console.log("Таблица users успешно заполнена данными");
               }
              });
            }
          });
        }
      });
    }
  });
});

module.exports = pool;

  
